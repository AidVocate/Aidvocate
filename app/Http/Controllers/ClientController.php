<?php

namespace App\Http\Controllers;

use Inertia\Inertia;
use App\Models\CaseModel;
use App\Models\Signature;
use Illuminate\Http\Request;
use App\Models\CaseQuestions;
use Illuminate\Support\Facades\DB;
use App\Models\LegalRepresentation;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Validator;
use Symfony\Component\HttpFoundation\RedirectResponse;

class ClientController extends Controller
{
    public function index()
    {
        return Inertia::render('Client/Index');
    }

    public function ViewLegalNeedForm()
    {
        return Inertia::render('Client/CreateLegalNeed');
    }


    public function AddLegalNeed(Request $request): RedirectResponse
    {
        $userId = Auth::id();
        // Retrieve all form fields from the request
        // Define validation rules for all form fields
        $request->validate ([
            'DateOfNextAppearance' => ['required', 'date', 'after_or_equal:today'],
            'NatureOfAppearance' => ['required', 'string'],
            'ServicesLanguage' => ['nullable', 'string'],
            'AdditionalInformation' => ['nullable', 'string'],
            'Question1' => ['required', 'string'],
            'Question2' => ['nullable', 'string'],
            'Question3' => ['nullable', 'string'],
            'ReasonForChange' => ['nullable', 'string'],
            'Signature' => ['required', 'string'],
            'PrintName' => ['required', 'string'],
            'SignDate' => ['required', 'date'],
        ]);

        // Create the case model
        $case = CaseModel::create([
            'id' => $userId,
            'DateOfNextAppearance' => $request->DateOfNextAppearance,
            'NatureOfAppearance' => $request->NatureOfAppearance,
            'ServicesLanguage' => $request->ServicesLanguage,
            'AdditionalInformation' => $request->AdditionalInformation,
        ]);

        // Check if case model was successfully created
        if (!$case) {
            // return redirect('/')->with('error', 'Failed to create CaseModel.');
        }

        // Fetch the CaseID generated by the database
        $caseID = CaseModel::select('CaseID')
                            ->where('id', '=', $userId)
                            ->where('DateOfNextAppearance', '=', $request->DateOfNextAppearance)
                            ->first();
        // Must decode json value into an integer
        $decode = json_decode($caseID, true);
        // Casting to integer
        $caseID = (int) $decode['CaseID'];

        // Create case questions
        $caseQuestions = CaseQuestions::create([
            'CaseID' => $caseID,
            'Question1' => $request->Question1,
            'Question2' => $request->Question2,
            'Question3' => $request->Question3,
        ]);

        // Associate case questions with the case
        $case->caseQuestions()->save($caseQuestions);

        // Create legal representation
        $legalRepresentation = LegalRepresentation::create([
            'CaseID' => $caseID,
            'ReasonForChange' => $request->ReasonForChange,
        ]);

        // Check if legal representation was successfully created
        if (!$legalRepresentation) {
            // Rollback the case creation and associated case questions
            $case->caseQuestions()->delete();
            $case->delete();

            // return redirect('/')->with('error', 'Failed to create LegalRepresentation.');
        }

        // Create signature
        $signature = Signature::create([
            'CaseID' => $caseID,
            'Signature' => $request->Signature,
            'PrintName' => $request->PrintName,
            'SignDate' => $request->SignDate,
        ]);

        // Check if signature was successfully created
        if (!$signature) {
            // Rollback the case creation, associated case questions, and legal representation
            $case->caseQuestions()->delete();
            $case->delete();
            $legalRepresentation->delete();

            // return redirect('/')->with('error', 'Failed to create Signature.');
        }

        // Optionally, you can return a response indicating success
        return redirect(route('dashboard'))->with('message', 'Legal Need Created successfully.');
    }

    public function ViewLegalNeed() 
    {
        $userID = Auth::id();
        // Retrieve the legal needs for the specified user
        $caseDetails = CaseModel::where('id', $userID)
            ->with('caseQuestions', 'legalRepresentation', 'signature')
            ->first();

        if (is_null($caseDetails))
        {
            return redirect(route('createLegalNeed'))->with('message', 'A Legal Need must first be submitted.');
        }

        // Pass the retrieved legal needs data to the view
        return Inertia::render('Client/ViewLegalNeed', [
            'caseDetails' => $caseDetails,
            'caseQuestions' => $caseDetails->caseQuestions,
            'caseRepresentation' => $caseDetails->legalRepresentation,
            'caseSignature' => $caseDetails->signature,
        ]);
    }

    public function UpdateLegalNeed(Request $request, $userID, $caseID): RedirectResponse
    {
        //Retrieve the case model
        $case = CaseModel::where('id', $userID)->findOrFail($caseID);

        // Define validation rules for updating legal needs
        $request->validate([
            'DateOfNextAppearance' => ['required', 'date', 'after_or_equal:today'],
            'NatureOfAppearance' => ['required', 'string'],
            'ServicesLanguage' => ['nullable', 'string'],
            'AdditionalInformation' => ['nullable', 'string'],
            'Question1' => ['required', 'string'],
            'Question2' => ['nullable', 'string'],
            'Question3' => ['nullable', 'string'],
            'ReasonForChange' => ['required', 'string'],
            'Signature' => ['required', 'string'],
            'PrintName' => ['required', 'string'],
            'SignDate' => ['required', 'date']
        ]);

        // Update the case model
        $case->update([
            'DateOfNextAppearance' => $request->DateOfNextAppearance,
            'NatureOfAppearance' => $request->NatureOfAppearance,
            'ServicesLanguage' => $request->ServicesLanguage,
            'AdditionalInformation' => $request->AdditionalInformation,
        ]);

        // Update case questions
        $case->caseQuestions->update([
            'Question1' => $request->Question1,
            'Question2' => $request->Question2,
            'Question3' => $request->Question3,
        ]);

        // Update legal representation
        $case->legalRepresentation->update([
            'ReasonForChange' => $request->ReasonForChange,
        ]);

        // Update signature
        $case->signature->update([
            'Signature' => $request->Signature,
            'PrintName' => $request->PrintName,
            'SignDate' => $request->SignDate,
        ]);

        return redirect()->back()->with('message', 'Legal Need updated successfully.');
    }
}
